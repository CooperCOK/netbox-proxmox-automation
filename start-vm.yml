---
- name: CREATE/START VM TASKS
  hosts: proxmox

  vars:
    gw_last_quad: 1

  tasks:
  - name: Read secrets from configuration
    include_vars:
      file: secrets.yml
      name: secrets_cfg

  - name: Read Proxmox VM Configuration
    include_vars:
      file: vms.yml
      name: proxmox_vm_cfg

#  - debug:
#      msg: "stuff is {{ proxmox_vm_cfg }}"

#  - debug:
#      msg: "{{ item.name }} | {{ lookup('file', item.sshkey) }} | ip: {{ item.ip }} | gateway: {{ item.ip.split('.')[:3] | join('.') }}.{{ item.gw if item.gw is defined else gw_last_quad }}"
#    with_items: "{{ proxmox_vm_cfg.vms }}"

  - name: Create each VM from a full clone of template
    community.general.proxmox_kvm:
      node: "{{ secrets_cfg.proxmox.node }}"
      api_user: "{{ secrets_cfg.proxmox.api_user }}"
      api_token_id: "{{ secrets_cfg.proxmox.api_token_id }}"
      api_token_secret: "{{ secrets_cfg.proxmox.api_token_secret }}"
      api_host: "{{ secrets_cfg.proxmox.api_host }}"
      clone: "{{ item.template }}"
      name: "{{ item.name }}"
      agent: 'enabled=1'
      storage: "{{ item.storage if item.storage is defined else proxmox_vm_cfg.default_storage }}"
      state: present
      timeout: 120
    with_items: "{{ proxmox_vm_cfg.vms }}"
    when: item.exists
    register: clone_vms_job
    async: 180
    poll: 0

  - name: Wait for VM cloning processes to finish
    async_status:
      #id: "{{ item.ansible_job_id }}"
      jid: "{{ item.ansible_job_id }}" # ansible version > 2.8
    register: _jobs_alias_vc_0
    until: _jobs_alias_vc_0.finished
    retries: 60
    delay: 5
    with_items: "{{ clone_vms_job.results }}"
    when: item.ansible_job_id is defined

  - name: Update VM settings (cloud-init, etc)
    community.general.proxmox_kvm:
      node: "{{ secrets_cfg.proxmox.node }}"
      api_user: "{{ secrets_cfg.proxmox.api_user }}"
      api_token_id: "{{ secrets_cfg.proxmox.api_token_id }}"
      api_token_secret: "{{ secrets_cfg.proxmox.api_token_secret }}"
      api_host: "{{ secrets_cfg.proxmox.api_host }}"
      name: "{{ item.name }}"
      cores: "{{ item.vcpus }}"
      vcpus: "{{ item.vcpus }}"
      memory: "{{ item.memory }}"
      sshkeys: "{{ lookup('file', item.sshkey) }}"
      ipconfig:
        ipconfig0: "ip={{ item.ip }},gw={{ item.ip.split('.')[:3] | join('.') }}.{{ item.gw if item.gw is defined else gw_last_quad }}"
      update: true
    with_items: "{{ proxmox_vm_cfg.vms }}"
    when: item.exists
    register: update_vms_settings_job
    async: 180
    poll: 0

  - name: Wait for VM settings updates processes to finish
    async_status:
      #id: "{{ item.ansible_job_id }}"
      jid: "{{ item.ansible_job_id }}" # ansible version > 2.8
    register: _ujobs_alias_vc_0
    until: _ujobs_alias_vc_0.finished
    retries: 60
    delay: 10
    with_items: "{{ update_vms_settings_job.results }}"
    when: item.ansible_job_id is defined

  - name: Grow VM disk
    community.general.proxmox_disk:
      api_user: "{{ secrets_cfg.proxmox.api_user }}"
      api_token_id: "{{ secrets_cfg.proxmox.api_token_id }}"
      api_token_secret: "{{ secrets_cfg.proxmox.api_token_secret }}"
      api_host: "{{ secrets_cfg.proxmox.api_host }}"
      name: "{{ item.name }}"
      disk: "{{ item.disk0 }}"
      size: "{{ item.disk }}G"
      state: resized
    with_items: "{{ proxmox_vm_cfg.vms }}"
    when: item.exists
    register: vm_update_disks_job
    async: 180
    poll: 0

  - name: Wait for VM disk updates processes to finish
    async_status:
      #id: "{{ item.ansible_job_id }}"
      jid: "{{ item.ansible_job_id }}" # ansible version > 2.8
    register: _ujobs_alias_vc_0
    until: _ujobs_alias_vc_0.finished
    retries: 60
    delay: 10
    with_items: "{{ vm_update_disks_job.results }}"
    when: item.ansible_job_id is defined

  - name: Start VM
    community.general.proxmox_kvm:
      node: "{{ secrets_cfg.proxmox.node }}"
      api_user: "{{ secrets_cfg.proxmox.api_user }}"
      api_token_id: "{{ secrets_cfg.proxmox.api_token_id }}"
      api_token_secret: "{{ secrets_cfg.proxmox.api_token_secret }}"
      api_host: "{{ secrets_cfg.proxmox.api_host }}"
      name: "{{ item.name }}"
      state: started
    with_items: "{{ proxmox_vm_cfg.vms }}"
    when: item.exists
    register: start_vms_job
    async: 180
    poll: 0

  - name: Wait for VM start processes to finish
    async_status:
      #id: "{{ item.ansible_job_id }}"
      jid: "{{ item.ansible_job_id }}" # ansible version > 2.8
    register: _sjobs_alias_vc_0
    until: _sjobs_alias_vc_0.finished
    retries: 60
    delay: 10
    with_items: "{{ start_vms_job.results }}"
    when: item.ansible_job_id is defined

  - name: Wait for SSH on VMs to become available
    wait_for: host="{{ item.ip | regex_replace('/.*$', '') }}" port=22 delay=10 timeout=300
    with_items: "{{ proxmox_vm_cfg.vms }}"
    when: item.exists


